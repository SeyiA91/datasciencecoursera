myapp = oauth_app('github',
key = '845544e574012c630c26',
secret = 'a902a5889d6b2ea85862a18d76caaf1eeebdbda2')
require("httr")
myapp = oauth_app('github',
key = '845544e574012c630c26',
secret = 'a902a5889d6b2ea85862a18d76caaf1eeebdbda2')
github_token = oauth2.0_token(oauth_endpoints('github'), myapp)
read.csv(path)
path = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
read.csv(path)
acs = read.csv(path)
install.packages('sqldf')
require(sqldf)
sqldf('select pwgtp1 from acs where AGEP < 50')
url = 'http://biostat.jhsph.edu/~jleek/contact.html'
html = htmlTreeParse(url, useInternalNodes = T)
require("httr")
require(XML)
html = htmlTreeParse(url, useInternalNodes = T)
html
xpathApply(html, "//div", xmlValue)
content = content(html, as = 'text')
url = 'http://biostat.jhsph.edu/~jleek/contact.html'
htmlCode = readLines(url)
content = content(htmlCode, as = 'text')
htmlCode
nchar(htmlCode[c(10,20,30,100)])
setwd('~/dev/datasciencecoursera/datasciencecoursera/Course_3/')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', 'Q5.for')             ')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for', 'Q5.for')
df <- read.fwf('Q5.for', skip = 4, widths = c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(df[,4])
chicago = readRDS('Chicago.rds')
chicago = data(chicago)
cars = data(mtcars)
setwd()
setwd('~/')
chi = readRDS('chicago.RDS')
str(data.tables)
require(data.table)
str(data.table)
require(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm('mydf')
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == '3.1.1', country == 'US')
?Comparison
filter(cran, r_version <= '3.0.2', country == 'IN')
filter(cran, country == 'US' | country == 'IN')
filter(cran, size > 100500 & r_os == 'linux-gnu')
filter(cran, size > 100500, r_os == 'linux-gnu')
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package)
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
subit()
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(studnets, sex, count, -grade)
gather(students, sex, count, -grade)
students2
gather(student2, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c('sex', class))
separate(res, sex_class, into = c('sex', 'class'))
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number('class_5')
parse_number("class_5")
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = 'passed')
passed <- passed %>% mutate(status = 'passed')
failed <- failed %>% mutate(status = 'failed')
?bind_rows
bind_rows(passed, failed, status)
bind_rows(passed, failed)
sat
?separate
submit()
submit()
setwd("~/dev/datasciencecoursera/datasciencecoursera/Course_3/")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',
'Fss06hid.csv')
df <- read.csv('Fss06hid.csv')
str(df)
class(c(df$ACR, df$AGS))
agricultureLogical <- df[df$ACR == 3 & AGS == 6]
agricultureLogical <- df[df$ACR == 3 & df$AGS == 6]
agricultureLogical <- df[df$ACR == 3 & df$AGS == 6,]
which(agricultureLogical)
agricultureLogical
agricultureLogical <- df %>% select(ACR, AGS) %>% filter(ACR == 3, AGS == 6)
agricultureLogical
agricultureLogical <- df[isTRUE(df$ACR == 3 & df$AGS == 6),]
agricultureLogical
which(agricultureLogical)
which(df$ACR == 3 & df$AGS == 6)
install.packages(jpeg)
install.packages('jpeg')
require('jpeg')
q2 <- readJPEG('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', native = T)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg',
'instructor.jpg')
q2 <- readJPEG('instructor.jpg', native = T)
?quantile
quantile(q2, c(.3, .8))
path1 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
gdp <- read.csv(path1)
edu <- read.csv(path2)
path2 <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
edu <- read.csv(path2)
names(gdp)
names(edu)
head(gdp)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', 'gdp.csv')
?read.csv
gdp <- read.csv('getdata%2Fdata%2FGDP.csv', header = T)
names(gdp)
head(gdp)
gdp <- gdP %>% select(-X)
gdp <- gdp %>% select(-X)
head(gdp)
head(edu)
intersect(gdp,edu)
?instersect
require(dplyr)
?instersect
??intersection
intersect(gdp,edu)
require(plyr)
?merge_all
df_list <- list(gdp, edu)
intersect(df_list)
df_list <- list(gdp$Country, edu$CountryCode)
intersect(gdp$Country, edu$CountryCode)
length(intersect(gdp$Country, edu$CountryCode))
?merge
mergedDf <- merge(gdp, edu, by.x = 'Country', by.y = 'CountryCode')
head(mergedDf)
mergedDf <- mergedDf %>% arrange(desc(Ranking))
mergedDf[13,]
dim(mergedDf)
names(mergedDf)
?merge
mergedDf <- merge(gdp, edu, by.x = 'Country', by.y = 'CountryCode', all = T)
dim(mergedDf)
mergedDf <- merge(gdp, edu, by.x = 'Country', by.y = 'CountryCode')
dim(mergedDf)
dim(edu)
dim(gdp)
mergedDf <- merge(edu, gdp, by.y = 'Country', by.x = 'CountryCode')
dim(mergedDf)
length(which(edu$CountryCode %in% gdp$Country))
length(isTRUE(which(edu$CountryCode %in% gdp$Country)))
which(edu$CountryCode %in% gdp$Country)
which(edu$CountryCode !in% gdp$Country)
which(edu$CountryCode !%in% gdp$Country)
setdiff(edu$CountryCode, gdp$Country)
mergedDf <- mergedDf %>% arrange(desc(Ranking))
tail(mergedDf)
names(mergedDf)
head(gdp)
head(edu)
tail(mergedDf$Ranking)
mergedDf <- merge(edu, gdp, by.y = 'Country', by.x = 'CountryCode')
tail(mergedDf$Ranking)
head(mergedDf$Ranking)
mergedDf <- mergedDf %>% arrange(desc(Ranking))
head(mergedDf$Ranking)
tail(mergedDf$Ranking)
tail(mergedDf$Ranking, n = 20)
View(mergedDf)
?arrange
mergedDf[13,]
class(mergedDf$Ranking)
mergedDf <- mergedDf %>%
mutate(Ranking = as.numeric(Ranking)) %>%
arrange(desc(Ranking))
tail(mergedDf$Ranking, n = 20)
mergedDf[13,]
mergedDf <- merge(edu, gdp, by.y = 'Country', by.x = 'CountryCode')
mergedDf <- mergedDf %>%
mutate(Ranking = as.numeric(Ranking)) %>%
arrange(desc(Ranking))
View(gdp)
gdp <- read.csv('getdata%2Fdata%2FGDP.csv', header = T)
head(gdp)
gdp <- gdp %>% select(-X)
head(gdp)
gdp <- read.csv('getdata%2Fdata%2FGDP.csv', header = T, na.strings = c("", " ", "NA"))
gdp <- gdp %>% select(-X)
head(gdp)
tail(gdp)
gdp <- read.csv('getdata%2Fdata%2FGDP.csv', header = T, na.strings = c("", " ", "NA"))
tail(gdp)
gdp <- read.csv('getdata%2Fdata%2FGDP.csv', header = T, na.strings = c("", " ", "NA"))
tail(gdp)
gdp <- gdp %>% select(-X)
mergedDf <- merge(edu, gdp, by.y = 'Country', by.x = 'CountryCode')
mergedDf <- mergedDf %>%
mutate(Ranking = as.numeric(Ranking)) %>%
arrange(desc(Ranking))
tail(mergedDf$Ranking, n = 20)
dim(mergedDf)
View(mergedDf)
mergedDf <- merge(gdp, edu, by.x = 'Country', by.y = 'CountryCode', all.x = T)
dim(mergedDf)
mergedDf <- merge(gdp, edu, by.x = 'Country', by.y = 'CountryCode', all.y = T)
dim(mergedDf)
mergedDf <- merge(gdp[1:190], edu, by.x = 'Country', by.y = 'CountryCode', all.x = T)
mergedDf <- merge(gdp[1:190,], edu, by.x = 'Country', by.y = 'CountryCode', all.x = T)
dim(mergedDf)
mergedDf <- mergedDf %>%
mutate(Ranking = as.numeric(Ranking)) %>%
arrange(desc(Ranking))
tail(mergedDf$Ranking, n = 20)
View(mergedDf)
mergedDf <- mergedDf %>%
mutate(Ranking = as.numeric(Dollars)) %>%
arrange(desc(Ranking))
View(mergedDf)
gdp <- read.csv(path, header = T, na.strings = c("", " ", "NA"))
gdp <- read.csv(path, header = T)
View(gdp)
path <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
gdp <- read.csv(path, header = T)
View(gdp)
head(gdp)
gdp <- gdp[-(1:4),]
head(gdp)
gdp <- read.csv(path, header = T)
gdp <- gdp %>% select([-(1:4),])
gdp <- gdp %>% select(-(1:4),)
gdp <- gdp[-(1:4),]
dim(gdp)
?rename
gdp <- gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) %>%
rename(X = CountryCode, Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars.Millions)
?rename
gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) %>%
rename(X = CountryCode, Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars.Millions)
gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) #%>%
gdp <- gdp[c(-(1:4),-(236:nrow(gdp))),]
dim(gdp)
gdp <- read.csv(path, header = T)
head(gdp)
tail(gdp)
gdp <- gdp[c(-(1:4),-(236:nrow(gdp))),]
head(gdp)
tail(gdp)
rename(gdp, X = CountryCode, Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars.Millions)
rename(gdp, X = CountryCode, Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars_Millions)
rename(gdp, X = CountryCode)
require(dplyr)
rename(gdp, X = CountryCode)
View(gdp)
names(gdp)
rename(gdp, "X" = CountryCode)
rename(gdp, Gross.domestic.product.2012 = GDP_2012)
gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) %>%
rename_(X = CountryCode, Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars.Millions)
gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) %>%
rename_( Gross.domestic.product.2012 = GDP_2012, X.2 = Country, X.3 = Dollars.Millions)
gdp %>%
select(X, Gross.domestic.product.2012, X.2, X.3) %>%
rename_(X.3 = Dollars.Millions)
rm(list = ls())
