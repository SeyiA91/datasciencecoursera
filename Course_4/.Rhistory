dir.path <- "~/dev/datasciencecoursera/datasciencecoursera/Course_3/UCI HAR Dataset/"
setwd(dir.path)
setwd(directory)
features <- fread('features.txt')
packages <- c("data.table", "reshape2", "dplyr", "plyr")
sapply(packages, require, character.only = T, quietly = T)
features <- fread('features.txt')
featuresWanted <- grep(".*[Mm]ean.*|.*std.*", features$V2)
featuresWanted.names <- features[featuresWanted,2]
View(featuresWanted.names)
train.path <- 'train'
xTrain <- fread(file.path(train.path, 'X_train.txt'), select = featuresWanted)
yTrain <- fread(file.path(train.path, 'Y_train.txt'))
subTrain <- fread(file.path(train.path, 'subject_train.txt'))
test.path <- 'test'
xTest <- fread(file.path(test.path, 'X_test.txt'), select = featuresWanted)
yTest <- fread(file.path(test.path, 'Y_test.txt'))
subTest <- fread(file.path(test.path, 'subject_test.txt'))
activities <- fread('activity_labels.txt')
subMerged <- rbind(subTrain, subTest)
xMerged <- rbind(xTrain, xTest)
yMerged <- rbind(yTrain, yTest)
mergedDf <- cbind(subMerged, yMerged, xMerged)
colnames(mergedDf) <- c('subject', 'activity_label', featuresWanted.names)
colnames(mergedDf) <- c('subject', 'activity_label', featuresWanted.names[,1])
colnames(xMerged) <- featuresWanted.names
colnames(xMerged) <- featuresWanted.names[,1]
names(xMerged) <- featuresWanted.names[,1]
names(xMerged) <- as.vector(featuresWanted.names)
names(xMerged) <- as.vector(as.character(featuresWanted.names))
rm(list = ls())
features <- fread('features.txt')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$V2)
names(xMerged) <- features[featuresIndices,2]
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$V2)
featuresWanted.names <- features[featuresIndices,2]
xTrain <- fread(file.path(train.path, 'X_train.txt'), select = featuresIndices)
train.path <- 'train'
xTrain <- fread(file.path(train.path, 'X_train.txt'), select = featuresIndices)
yTrain <- fread(file.path(train.path, 'Y_train.txt'))
subTrain <- fread(file.path(train.path, 'subject_train.txt'))
test.path <- 'test'
xTest <- fread(file.path(test.path, 'X_test.txt'), select = featuresIndices)
yTest <- fread(file.path(test.path, 'Y_test.txt'))
subTest <- fread(file.path(test.path, 'subject_test.txt'))
xMerged <- rbind(xTrain, xTest)
names(xMerged) <- features[featuresIndices,2]
names(xMerged) <- featuresWanted.names
featuresWanted <- features[featuresIndices,]
names(xMerged) <- featuresWanted$V2
activities <- fread('activity_labels.txt')
subMerged <- rbind(subTrain, subTest)
xMerged <- rbind(xTrain, xTest)
yMerged <- rbind(yTrain, yTest)
mergedDf <- cbind(subMerged, yMerged, xMerged)
colnames(mergedDf) <- c('subject', 'activity_label', featuresWanted$V2)
names(mergedDf) <- tolower(names(mergedDf))
View(mergedDf)
mergedDf$activity_label <- as.factor(mergedDf$activity_label)
levels(mergedDf$activity_label) <- activities$V2
View(mergedDf)
featuresWanted$V2 = gsub('-mean', 'Mean', featuresWanted.names)
View(featuresWanted)
?gsub
featuresWanted <- features[featuresIndices,]
featuresWanted <- features[featuresIndices,]
View(featuresWanted)
featuresWanted$V2 = gsub('-mean', 'Mean', featuresWanted$V2)
View(featuresWanted)
View(featuresWanted)
featuresWanted$V2 = gsub('-std', 'Std', featuresWanted$V2)
View(featuresWanted)
featuresWanted$V2 <- gsub('[-()]', '', featuresWanted$V2)
View(featuresWanted)
View(features)
names(features) <- c('rowIndex', 'featureName')
names(features) <- c('rowIndex', 'featureName')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$featureName)
featuresWanted <- features[featuresIndices]
featuresWanted$V2 = gsub('-mean', 'Mean', featuresWanted$featureName)
featuresWanted$V2 = gsub('-std', 'Std', featuresWanted$featureName)
featuresWanted$V2 <- gsub('[-()]', '', featuresWanted$featureName)
names(features) <- c('rowIndex', 'featureName')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$featureName)
featuresWanted <- features[featuresIndices]
featuresWanted$featureName = gsub('-mean', 'Mean', featuresWanted$featureName)
featuresWanted$featureName = gsub('-std', 'Std', featuresWanted$featureName)
featuresWanted$featureName <- gsub('[-()]', '', featuresWanted$featureName)
View(featuresWanted)
View(featuresWanted)
rm(list = ls())
features <- fread('features.txt')
names(features) <- c('rowIndex', 'featureName')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$featureName)
featuresWanted <- features[featuresIndices]
featuresWanted$featureName = gsub('-mean', 'Mean', featuresWanted$featureName)
featuresWanted$featureName = gsub('-std', 'Std', featuresWanted$featureName)
featuresWanted$featureName <- gsub('[-()]', '', featuresWanted$featureName)
train.path <- 'train'
xTrain <- fread(file.path(train.path, 'X_train.txt'), select = featuresIndices)
yTrain <- fread(file.path(train.path, 'Y_train.txt'))
subTrain <- fread(file.path(train.path, 'subject_train.txt'))
test.path <- 'test'
xTest <- fread(file.path(test.path, 'X_test.txt'), select = featuresIndices)
yTest <- fread(file.path(test.path, 'Y_test.txt'))
subTest <- fread(file.path(test.path, 'subject_test.txt'))
rm(list = ls())
features <- fread('features.txt')
names(features) <- c('rowIndex', 'featureName')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$featureName)
featuresWanted <- features[featuresIndices]
featuresWanted$featureName = gsub('-mean', 'Mean', featuresWanted$featureName)
featuresWanted$featureName = gsub('-std', 'Std', featuresWanted$featureName)
featuresWanted$featureName <- gsub('[-()]', '', featuresWanted$featureName)
train.path <- 'train'
xTrain <- fread(file.path(train.path, 'X_train.txt'), select = featuresIndices)
yTrain <- fread(file.path(train.path, 'Y_train.txt'))
subTrain <- fread(file.path(train.path, 'subject_train.txt'))
test.path <- 'test'
xTest <- fread(file.path(test.path, 'X_test.txt'), select = featuresIndices)
yTest <- fread(file.path(test.path, 'Y_test.txt'))
subTest <- fread(file.path(test.path, 'subject_test.txt'))
activities <- fread('activity_labels.txt')
subMerged <- rbind(subTrain, subTest)
xMerged <- rbind(xTrain, xTest)
yMerged <- rbind(yTrain, yTest)
mergedDf <- cbind(subMerged, yMerged, xMerged)
colnames(mergedDf) <- c('subject', 'activity_label', featuresWanted$featureName)
mergedDf$activity_label <- as.factor(mergedDf$activity_label)
levels(mergedDf$activity_label) <- activities$V2
View(mergedDf)
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
View(aggDf)
?melt
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
setwd(dir.path)
features <- fread('features.txt')
names(features) <- c('rowIndex', 'featureName')
featuresIndices <- grep(".*[Mm]ean.*|.*std.*", features$featureName)
featuresWanted <- features[featuresIndices]
featuresWanted[,2]
write.table(featuresWanted$featureName, '../../../Course3_Project/features.txt', row.names = F)
featuresWanted <- features[featuresIndices]
featuresWanted$featureName = gsub('-mean', 'Mean', featuresWanted$featureName)
featuresWanted$featureName = gsub('-std', 'Std', featuresWanted$featureName)
featuresWanted$featureName <- gsub('[-()]', '', featuresWanted$featureName)
write.table(featuresWanted$featureName, '../../../Course3_Project/features.txt', row.names = F)
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
source("~/dev/datasciencecoursera/Course3_Project/run_analysis.R")
rm(list list = ls())
rm(list = ls())
require(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h = 12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12)
abline(v = 12, lwd= 2)
abline(v = median(ppm), col = 'magenta', lwd= 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$pm25)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main = 'Number of Counties in Each Region')
boxplot(pm25 ~ region, data = pollution, col = 'red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
east = hist(subset(pollution, region == 'east'))
east = subset(pollution, region == 'east')
east <- subset(pollution, region == 'east')
head(east)
hist(east$pm25, col = 'green')
hist(subset(pollution, region == 'west'), col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
with(pollution, plot(latitude, pm25))
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = 'West')
plot(east$latitude, east$pm25, main = 'East')
?Devices
with(faithful, plot(eruptions, waiting))
title(main= 'Old Faithful Geyser data')
dev.cur()
pdf(file = 'myplot.pdf')
with(faithful, plot(eruptions, waiting))
title(main= 'Old Faithful Geyser data')
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = 'Old Faithful Geyser data')
dev.copy(png, 'geyserplot.png')
dev.copy(png, file = 'geyserplot.png')
dev.close()
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), 'SWIRL rules')
text(mean(cars$speed), max(cars$dist), 'SWIRL rules!')
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = T)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~MOnth, airquality)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)', col.axis = 'blue', col.lab = 'red')
title(main = 'Ozone and Wind in New York City')
with(airquality, plot(Wind, Ozone))
title(main = 'Ozone and Wind in New York City')
par()
length(par())
par()
names(par())
par()$pin
par('fg')
par('pch')
par('lty')
plot(airquality$Wind, airquality$Ozone, type = 'n')
title(main = 'Wind and Ozone in NYC')
names(airquality)
may <- subset(airquality, Month)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = 'blue', pch = 'triangle')
points(may$Wind, may$Ozone, col = 'blue', pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = 'red', pch = 18)
points(notmay$Wind, notmay$Ozone, col = 'red', pch = 8)
legend("topright", pch = c(17,8),col = c('blue', 'red'), legend = c('May', 'Other Months'))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = 'Ozone and Wind')
plot(airquality$Ozone, airquality$Solar.R, main = 'Ozone and Solar Radiation')
par(mfrow = c(1,3), mar=c(44,2,1), oma=c(0,0,2,0))
par(mfrow = c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = 'Ozone and Wind')
plot(airquality$Solar.R, airquality$Ozone, main = 'Ozone and Solar Radiation')
plot(airquality$Temp, airquality$Ozone, main = 'Ozone and Temperature' )
mtext('Ozone and Weather in New York City', outer = TRUE)
?Devices
setwd('~/dev/datasciencecoursera/datasciencecoursera/Course_4/')
file_name <- 'exdata%2Fdata%2Fhousehold_power_consumption.zip'
if (file.exists(file_name)){
unzip(file_name)
}
setwd('~/dev/datasciencecoursera/datasciencecoursera/Course_4/')
data <- data.frame()
if (file.exists(file_name)){
data <- unzip(file_name)
}
file_name <- 'exdata%2Fdata%2Fhousehold_power_consumption.zip'
if (file.exists(file_name)){
file_name <- unzip(file_name)
}
names(read.csv())
names(read.csv
)
args(read.csv)
?read.csv
data <- read.csv(file_name, na.strings = '?')
require(sqldf)
data <- read.csv.sql(file_name, sql = 'select * from file where Date between 2007-02-01 and 2007-02-02')
View(data)
data <- fread(file_name)
View(data)
sapply(data, class)
View(data)
summary(data)
data$Date <- as.Date(data$Date)
dateSubset <- subset(data, Date >= '2007-02-01' & Date =< '2007-02-02')
?subset
require(data.table,dplyr)
dateSubset <- data %>% filter(Date >= '2007-02-01', Date =< '2007-02-02')
dateSubset <- data %>% filter(Date >= '2007-02-01', Date <= '2007-02-02')
dateSubset <- subset(data, Date >= '2007-02-01' & Date <= '2007-02-02')
dateSubset <- subset(data, Date >= 2007-02-01 & Date <= 2007-02-02)
wday(data$Date)
wday(data$Date[1:10])
class(data$Date)
dateSubset <- data %>% filter(Date >= '2007-02-01')
dateSubset <- data %>% filter(Date >= as.Date('2007-02-01'), Date <= as.Date('2007-02-02'))
dateSubset <- subset(data, Date >= as.Date('2007-02-01') & Date <= as.Date('2007-02-02'))
dateSubset <- subset(data, Date >= as.Date('2007-02-01') )
with(data, which(Date >= as.Date('2007-02-01')))
with(data, which(Date >= '2007-02-01')
with(data, which(Date >= '2007-02-01')
)
with(data, which(Date >= '2007-02-01'))
data$Date[1:10]
View(data)
data <- fread(file_name)
View(data)
d2 = Sys.Date() # date
d2
class(d2)
?as.Date
data$Date <- as.Date(data$Date, "%d/%m/%Y")
View(data)
dateSubset <- data %>% filter(Date >= as.Date('2007-02-01'), Date <= as.Date('2007-02-02'))
View(dateSubset)
?strptime
View(dateSubset)
View(data)
dateSubset$Time <- strptime(dateSubset$Time, "%H:%M:%S")
View(dateSubset)
dateSubset$Time <- time(strptime(dateSubset$Time, "%H:%M:%S"))
?time
dateSubset$Time <- time(dateSubset$Time)
dateSubset <- data %>% filter(Date >= as.Date('2007-02-01'), Date <= as.Date('2007-02-02'))
dateSubset$Time <- time(dateSubset$Time)
View(dateSubset)
dateSubset <- data %>% filter(Date >= as.Date('2007-02-01'), Date <= as.Date('2007-02-02'))
sapply(data, class)
data <- fread(file_name, na.strings = '?')
data$Date <- as.Date(data$Date, "%d/%m/%Y")
dateSubset <- data %>% filter(Date >= as.Date('2007-02-01'), Date <= as.Date('2007-02-02'))
names(dateSubset)
with(dateSubset, hist(Global_active_power, xlab = 'Global Acitve Power (kilowatts)',
ylab = 'Frequency', main = 'Global Active Power'))
with(dateSubset, hist(Global_active_power, xlab = 'Global Acitve Power (kilowatts)',
ylab = 'Frequency', main = 'Global Active Power'), col = 'red')
par(mfrow=c(1,1))
with(dateSubset, hist(Global_active_power, xlab = 'Global Acitve Power (kilowatts)',
ylab = 'Frequency', main = 'Global Active Power'), col = 'red')
with(dateSubset, hist(Global_active_power, xlab = 'Global Acitve Power (kilowatts)',
ylab = 'Frequency', main = 'Global Active Power'), col = 'red')
with(dateSubset, hist(Global_active_power, xlab = 'Global Acitve Power (kilowatts)',
ylab = 'Frequency', main = 'Global Active Power'), fill = 'red')
?hist
?weekdays
with(dateSubset, plot(weekdays(Date, abbreviate = T), Global_active_power))
?plot
weekdays(dateSubset$Date[1:10])
with(dateSubset, plot(weekdays(Date, abbreviate = T), Global_active_power, type = 'l'))
plot(dateSubset$Date, dateSubset$Global_active_power, type = 'l')
